{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["b","window","location","hash","Bugout","substr","address","timer","store","ready","time","startAmount","endTime","Date","now","status","tick","Math","max","play","sendState","pause","reset","addTime","amount","setState","state","console","log","send","justJoined","on","ad","setInterval","view","className","secs","floor","mins","hours","String","padStart","formattedTime","onClick","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b21dbdc7.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nimport Bugout from \"bugout/docs/bugout.min.js\";\nimport { store, view } from \"@risingstack/react-easy-state\";\n\nconst DEFAULT_START_TIME = 10 * 60 * 1000;\n\nlet b = window.location.hash\n  ? new Bugout(window.location.hash.substr(1))\n  : Bugout();\n\nif (!window.location.hash) window.location.hash = b.address();\n\nconst timer = store({\n  ready: false,\n  time: DEFAULT_START_TIME,\n  startAmount: DEFAULT_START_TIME,\n  endTime: Date.now() + DEFAULT_START_TIME,\n  status: \"idle\",\n  tick: () => {\n    timer.time = Math.max(0, timer.endTime - Date.now());\n  },\n  play: () => {\n    timer.status = \"running\";\n    timer.endTime = Date.now() + timer.time;\n    timer.sendState();\n  },\n  pause: () => {\n    timer.status = \"paused\";\n    timer.sendState();\n  },\n  reset: () => {\n    timer.status = \"idle\";\n    timer.endTime = Date.now() + timer.startAmount;\n    timer.time = timer.startAmount;\n    timer.sendState();\n  },\n  addTime: (amount) => {\n    timer.endTime = timer.endTime + amount;\n    timer.time = timer.time + amount;\n    timer.sendState();\n  },\n  setState: (state) => {\n    timer.time = state.time;\n    timer.startAmount = state.startAmount;\n    timer.endTime = state.endTime;\n    timer.status = state.status;\n  },\n  sendState: () => {\n    const state = {\n      time: timer.time,\n      startAmount: timer.startAmount,\n      endTime: timer.endTime,\n      status: timer.status,\n    };\n    console.log(\"sending state \", state);\n    b.send({ state, justJoined: !timer.ready });\n  },\n});\n\nb.on(\"message\", (address, { state, justJoined }) => {\n  console.log(\"got message from\", address, state, justJoined);\n  if ((address !== b.address() && !justJoined) || !timer.ready) {\n    timer.setState(state);\n    timer.ready = true;\n  }\n});\n\nb.on(\"seen\", (ad) => {\n  console.log(\"seen:\", ad);\n  timer.sendState();\n});\n\nsetInterval(() => {\n  if (timer.status === \"running\") {\n    timer.tick();\n  }\n}, 100);\n\nconst formattedTime = (time) => {\n  const secs = Math.floor(time / 1000) % 60;\n  const mins = Math.floor(time / 60000) % 60;\n  const hours = Math.floor(time / 3600000);\n  return `${String(hours).padStart(2, \"0\")}:${String(mins).padStart(\n    2,\n    \"0\"\n  )}:${String(secs).padStart(2, \"0\")}`;\n};\n\nexport default view(() => (\n  <div className=\"App\">\n    <header className=\"App-header\">\n      <h1>Timer</h1>\n      <p>{formattedTime(timer.time)}</p>\n      <button\n        onClick={() => {\n          if (timer.status === \"running\") {\n            timer.pause();\n          } else {\n            timer.play();\n          }\n        }}\n      >\n        {timer.status === \"running\"\n          ? \"Pause\"\n          : timer.status === \"paused\"\n          ? \"Resume\"\n          : \"Start\"}\n      </button>\n      <button\n        onClick={() => {\n          timer.reset();\n        }}\n      >\n        Reset\n      </button>\n      <button\n        onClick={() => {\n          timer.addTime(10 * 1000);\n        }}\n      >\n        +10 seconds\n      </button>\n      <button\n        onClick={() => {\n          timer.addTime(60 * 1000);\n        }}\n      >\n        +1 minute\n      </button>\n      <button\n        onClick={() => {\n          timer.addTime(5 * 60 * 1000);\n        }}\n      >\n        +5 minutes\n      </button>\n    </header>\n  </div>\n));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}